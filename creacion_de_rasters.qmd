---
title: "Creación de imagenes raster"
lang: es
---

---

**Input inicial**
- Archivos `.csv` con datos de movilidad ciudadana expresados por QuadKeys.
Existe un archivo por locación y horario reportado.

**Objetivo**
- Crear las imagenes rasters para cada caso expresando como atributo el cambio
porcentual semanal y prepandemia.

---

## Paquete `quadkeyr`

Los pasos que se describen aquí se encuentran detallados en [la viñeta del 
paquete `quadkeyr`](https://fernandez-lab-wsu.github.io/quadkeyr/articles/create_rasters_from_grid.html)
que fue especificamente creado para la creación de los rasters.

## 1. Leo los archivos

Esta función me reporta los archivos faltantes en la serie de días y horarios.

### Buenos Aires

```{r eval= FALSE, include = TRUE}
  library(quadkeyr)
  
  files <- read_fb_mobility_files(
    path_to_csvs = "../Desktop/Facebook data/BsAs_facebookpop/",
    colnames = c(
      "lat",
      "lon",
      "quadkey",
      "date_time",
      "n_crisis",
      "percent_change"
    ),
    coltypes = list(
      lat = 'd',
      lon = 'd',
      quadkey = 'c',
      date_time = 'T',
      n_crisis = 'c',
      percent_change = 'c'
    )
  )
```

Por ejemplo, estos fueron los faltantes para los datos de AMBA:

```
day time
1  2020-07-03    0
2  2020-07-04    0
3  2020-07-05    0
4  2020-07-06    0
5  2020-07-07    0
6  2020-07-08    0
7  2020-07-09    0
8  2020-07-10    0
9  2020-07-11    0
10 2020-07-12    0
11 2020-09-12    0
12 2020-09-13    0
13 2020-07-03    8
14 2020-07-04    8
15 2020-07-05    8
16 2020-07-06    8
17 2020-07-07    8
18 2020-07-08    8
19 2020-07-09    8
20 2020-07-10    8
21 2020-07-11    8
22 2020-07-12    8
23 2020-09-12    8
24 2020-09-13    8
25 2020-07-03   16
26 2020-07-04   16
27 2020-07-05   16
28 2020-07-06   16
29 2020-07-07   16
30 2020-07-08   16
31 2020-07-09   16
32 2020-07-10   16
33 2020-07-11   16
34 2020-09-12   16
```

## 2. Convierto los QuadKeys en coordenadas del mapa

- Tomo todos los QuadKeys que fueron reportados al menos una vez en mi lista de 
 archivos `.csv` y los convierto en latitud y longitud.

- Este punto representa la ubicación del vértice de arriba a la izquierda 
de cada QuadKey.

```{r eval= FALSE, include = TRUE}

  regular_grid <- get_regular_polygon_grid(data = files)
  files_polygons <- files |> 
    dplyr::inner_join(regular_grid$data, 
                          by = c("quadkey")) 


```


```{r}
    # Generate the raster files                       
  polygon_to_raster(data = files_polygons,
                    nx = regular_grid$num_cols,
                    ny = regular_grid$num_rows,
                    template = files_polygons,
                    var = 'percent_change',
                    filename = 'BuenosAires',
                    path = "../Desktop/Facebook data/rasters_baires/")
```


```{r}
  # 7 days
  files_polygons_7 <- files_polygons |>
    apply_weekly_lag()
  
  # Generate the raster files                       
  polygon_to_raster(data = files_polygons,
                    nx = regular_grid$num_cols,
                    ny = regular_grid$num_rows,
                    template = files_polygons,
                    var = 'percent_change',
                    filename = 'BuenosAires',
                    path = "../Desktop/Facebook data/rasters_baires/")
```


## 3. Completar la grilla de QuadKeys

- Si bien un gran número de QuadKeys que son siempre reportados en todos los 
archivos, esto no es una constante.

- La función `regular_qk_grid` permite completar la grilla. Esta función
devuelve una lista con 3 elementos: `data`, `num_rows` y `num_cols`.

```{r eval= FALSE, include = TRUE}
regular_grid <- regular_qk_grid(qtll)
regular_grid
```


## 4. Crear los polígonos


```{r eval= FALSE, include = TRUE}

polygrid <- grid_to_polygon(regular_grid$data)

```

## 5. Generar los rasters para las variables de interés

La función `apply_weekly_lag()` permite generar los datos de cambio porcentual
semanal creando un lag de 7 días.

```{r eval= FALSE, include = TRUE}
polyvar <- files |>
            dplyr::inner_join(polygrid, by = 'quadkey' ) |>
            apply_weekly_lag() 

polyvar7 <-  polyvar |>
               drop_na(percent_change_7)
```

Loas imagenes raster se crearan automaticamente para todos los archivos en la
carpeta con el formato `<nombre>_<fecha>_<hora>.tif`. La función 
`polygon_to_raster` va a crear los raster incluso si hay algún archivo de la 
serie faltante.

```{r eval= FALSE, include = TRUE}
# cambio porcentual prepandemia
polygon_to_raster(data = polyvar,
                  nx = grid$num_cols +1 ,
                  ny = grid$num_rows +1 ,
                  template = polyvar,
                  variable = 'percent_change',
                  filename = 'Baires',
                  path = "data/"
                  )

# cambio porcentual semanal
polygon_to_raster(data = polyvar7,
                  nx = grid$num_cols +1 ,
                  ny = grid$num_rows +1 ,
                  template = polyvar7,
                  variable = 'percent_change_7',
                  filename = 'Baires',
                  path = "data/"
                  )
```
 
### AMBA

```{r}
library(quadkeyr)

files <- read_fb_mobility_files(
  path_to_csvs = "../../Desktop/Facebook data/AMBA_facebookpop/",
  keep_format = "country",
  colnames = c(
    "lat",
    "lon",
    "quadkey",
    "country",
    "date_time",
    "n_crisis",
    "percent_change"
  ),
  coltypes = list(
    lat = 'd',
    lon = 'd',
    quadkey = 'c',
    country = 'c',
    date_time = 'T',
    n_crisis = 'c',
    percent_change = 'c'
  )
)
```

Aparentemente hay algunos quadkeys problemáticos porque tienen errores,
los elimino.

```{r}
# remuevo los datos problematicos.
error_scinot <- subset(files, 
                       quadkey == "2.10321E+15     ")

# Aparece un error, de un numero que no pudo ser convertido a quadkey,
# lo separo y lo guardo

write.csv(error_scinot, 
          "data/remove_quadkeys_amba.csv")

# dejo solo los quadkeys reportados para argentina
# asi remuevo otros que aparecen para uruguay o en el mar
files = subset(files,
               country == 'AR')
# remuevo los datos problematicos.
files = subset(files, 
               quadkey != "2.10321E+15     ")
```

Obtengo la grilla con los QuadKeys

```{r}
library(sf)
amba <- st_read('data/amba_reducido.gpkg')

joined_data <- st_join(regular_grid$data,
                       amba,
                       left = FALSE)

files_polygons <- files |> 
  dplyr::inner_join(joined_data, 
                    by = c("quadkey")) 

regular_grid <- get_regular_polygon_grid(data = files)
regular_grid
```

Cargo el mapa vectorial de AMBA y dejo solo los polígonos que estan incluidos.

```{r}


```

En `joined_data` tengo los polígonos incluidos en AMBA

```{r}


# Generate the raster files                       
polygon_to_raster(data = files_polygons,
                  nx = regular_grid$num_cols,
                  ny = regular_grid$num_rows,
                  template = files_polygons,
                  var = 'percent_change',
                  filename = 'AMBA',
                  path = "rasters_amba/")
```


```{r}
# 7 days
files_polygons_7 <- files_polygons |>
  apply_weekly_lag()

# Generate the raster files                       
polygon_to_raster(data = files_polygons_7,
                  nx = regular_grid$num_cols,
                  ny = regular_grid$num_rows,
                  template = files_polygons_7,
                  var = 'percent_change_7',
                  filename = 'AMBA7',
                  path = "../Desktop/Facebook data/rasters_amba/")
```

## Subida de los archivos a PostgreSQL

Extraido de https://sysadminguides.org/2017/05/02/how-to-pass-credentials-in-powershell/

```
 # Configurar la variable PGPASSWORD en la terminal antes de correr
$env:PGPASSWORD = "####"

# Append postrgres to path
$env:PATH += ";C:\Program Files\PostgreSQL\16\bin" 
$env:PATH += ";C:\Program Files\PostgreSQL\16\lib" 
$env:PATH += ";C:\Program Files\PostgreSQL\16\share\contrib\postgis-3.4\proj\proj.db"

# Database connection parameters
$DBNAME="geocovidapp_db"
$USER="####"
$PORT="####"

$PGPASSWORD

# Define variables
$RASTER_DIRECTORY = "C:\Users\florencia\Documents\rasters\rasters_amba\amba_pc\"
$RASTER_FILES = Get-ChildItem -Path $RASTER_DIRECTORY -Filter "*.tif"
$RASTER_FULLPATH = Get-ChildItem -Path $RASTER_DIRECTORY -Filter "*.tif" | ForEach-Object {Join-Path -Path $RASTER_DIRECTORY -ChildPath $_.Name}

# Loop through raster files
foreach ($RASTER_FILE in $RASTER_FULLPATH) {
    # Get raster file name without path and extension
    $RASTER_NAME = [System.IO.Path]::GetFileNameWithoutExtension($RASTER_FILE)

    # Insert raster data into PostGIS table

    raster2pgsql -a -s 4326 -I -F $RASTER_FILE raster_schema.rasters | psql -d $DBNAME -U $USER -p $PORT 

    # Optional: Add metadata to the inserted record
    # psql -d $DBNAME -U $USER -p $PORT -c "UPDATE SET filename = 'Raster $RASTER_NAME', description = 'Description for $RASTER_NAME' WHERE rast ~* '$RASTER_NAME';"
}
 
```

Click izquierdo en el archivo y selecciono `run with PowerShell` 



