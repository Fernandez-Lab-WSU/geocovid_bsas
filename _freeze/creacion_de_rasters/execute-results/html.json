{
  "hash": "346afe36ab1c5ceae40d2503921f2afd",
  "result": {
    "markdown": "---\ntitle: \"Creación de imagenes raster\"\nlang: es\n---\n\n\n---\n\n**Datos iniciales:**\nLos archivos empleados para este procesamiento son los `.csv` diarios provistos por Meta que son reportados para tres momentos del día: 0am, 8am, 4pm en el periodo de analisis. Cada dato de movilidad se reporta por QuadKey.\n\n**Se busca obtener:**\nImagenes raster que representen el cambio porcentual semanal y prepandemia en \nla movilidad ciudadana.\n\n---\n\n## Procesamiento de datos iniciales\nPuedes encontrar un ejemplo detallado en [esta viñeta del paquete `quadkeyr`](https://fernandez-lab-wsu.github.io/quadkeyr/articles/create_rasters_from_grid.html).\nSe transcribe a continuación un ejemplo\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'quadkeyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:graphics':\n\n    clip\n```\n:::\n:::\n\n\n\n### 1. Carga y procesamiento de los csv \n\n\n::: {.cell}\n\n```{.r .cell-code}\nfiles <- read_all_files(path_to_csvs = \"../Desktop/Facebook data/AMBA_facebookpop/\",\n                        colnames = c(\"lat\", \"lon\", \n                                     \"quadkey\", \"date_time\", \n                                     \"n_crisis\", \"percent_change\"),\n                        coltypes = list(\n                          lat = 'd',\n                          lon = 'd',\n                          quadkey = 'd',\n                          date_time = 'T',\n                          n_crisis = 'c',\n                          percent_change = 'c')) \n\nfiles\n```\n:::\n\n\nDatos faltantes en la corrida para los archivos de AMBA: \n\n```\nday time\n1  2020-07-03    0\n2  2020-07-04    0\n3  2020-07-05    0\n4  2020-07-06    0\n5  2020-07-07    0\n6  2020-07-08    0\n7  2020-07-09    0\n8  2020-07-10    0\n9  2020-07-11    0\n10 2020-07-12    0\n11 2020-09-12    0\n12 2020-09-13    0\n13 2020-07-03    8\n14 2020-07-04    8\n15 2020-07-05    8\n16 2020-07-06    8\n17 2020-07-07    8\n18 2020-07-08    8\n19 2020-07-09    8\n20 2020-07-10    8\n21 2020-07-11    8\n22 2020-07-12    8\n23 2020-09-12    8\n24 2020-09-13    8\n25 2020-07-03   16\n26 2020-07-04   16\n27 2020-07-05   16\n28 2020-07-06   16\n29 2020-07-07   16\n30 2020-07-08   16\n31 2020-07-09   16\n32 2020-07-10   16\n33 2020-07-11   16\n34 2020-09-12   16\n```\n\n\n### 2. Obtención de las coordenadas \n\n\n::: {.cell}\n\n```{.r .cell-code}\nquadkeys <-  unique(files$quadkey)\n\nqtll <- quadkey_to_latlong(quadkeys = quadkeys)\n\nqtll\n```\n:::\n\n\n### 3. Completo la grilla\n\n\n::: {.cell}\n\n```{.r .cell-code}\nregular_grid <- regular_qk_grid(qtll)\n\nregular_grid\n```\n:::\n\n\n### 4. Convierto a polígonos\n\n\n::: {.cell}\n\n```{.r .cell-code}\npolygrid <- grid_to_polygon(regular_grid$data)\n\npolygrid\n```\n:::\n\n\n\n### 5. Genero las variable `percent_change_7` \nEsta variable me permite obtener los valores de cambio porcentual semanal.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npolyvar <- files |>\n  select(day, time, quadkey, n_crisis, percent_change) |>\n  inner_join(polygrid, by = 'quadkey' ) |>\n  apply_weekly_lag() \n\npolyvar7 <-  polyvar |>\n  drop_na(percent_change_7)\n```\n:::\n\n\n\n### 6. Creación de las imagenes raster \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cambio porcentual prepandemia\npolygon_to_raster(data = polyvar,\n                  nx = grid$num_cols +1 ,\n                  ny = grid$num_rows +1 ,\n                  template = polyvar,\n                  variable = 'percent_change',\n                  filename = 'Baires',\n                  path = \"data/\"\n)\n\n# Cambio porcentual semanal\npolygon_to_raster(data = polyvar7,\n                  nx = grid$num_cols +1 ,\n                  ny = grid$num_rows +1 ,\n                  template = polyvar7,\n                  variable = 'percent_change_7',\n                  filename = 'Baires',\n                  path = \"data/\"\n)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}